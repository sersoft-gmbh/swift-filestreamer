{
  "abstract" : [
    {
      "text" : "Returns the maximum element in the asynchronous sequence, using the given",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "predicate as the comparison between elements.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/FileStreamer\/documentation\/FileStreamer",
        "doc:\/\/FileStreamer\/documentation\/FileStreamer\/FileStream",
        "doc:\/\/FileStreamer\/documentation\/FileStreamer\/FileStream\/AsyncSequence-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FileStreamer\/documentation\/FileStreamer\/FileStream\/max(by:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "_Concurrency",
    "externalID" : "s:Sci12_ConcurrencyE3max2by7ElementQzSgSbAE_AEtYaKXE_tYaKF::SYNTHESIZED::s:12FileStreamer0A6StreamV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "max"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "by"
      },
      {
        "kind" : "text",
        "text" : ": ("
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "async"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "throws"
      },
      {
        "kind" : "text",
        "text" : " -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "async"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "rethrows"
      },
      {
        "kind" : "text",
        "text" : " -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : "?"
      }
    ],
    "modules" : [
      {
        "name" : "FileStreamer",
        "relatedModules" : [
          "_Concurrency"
        ]
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "6.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "max(by:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "attribute",
              "text" : "@warn_unqualified_access"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "max"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "by"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "areInIncreasingOrder"
            },
            {
              "kind" : "text",
              "text" : ": ("
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "async"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "throws"
            },
            {
              "kind" : "text",
              "text" : " -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "async"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "rethrows"
            },
            {
              "kind" : "text",
              "text" : " -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : "?"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A predicate that returns ",
                  "type" : "text"
                },
                {
                  "code" : "true",
                  "type" : "codeVoice"
                },
                {
                  "text" : " if its",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "first argument should be ordered before its second argument; otherwise,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "false",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "areInIncreasingOrder"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The sequence’s minimum element, according to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "areInIncreasingOrder",
              "type" : "codeVoice"
            },
            {
              "text" : ". If the sequence has no elements, returns ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use this method when the asynchronous sequence’s values don’t conform",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to ",
              "type" : "text"
            },
            {
              "code" : "Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : ", or when you want to apply a custom ordering to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sequence.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The predicate must be a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "strict weak ordering",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " over the elements. That is,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for any elements ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "c",
              "type" : "codeVoice"
            },
            {
              "text" : ", the following conditions must hold:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "areInIncreasingOrder(a, a)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is always ",
                      "type" : "text"
                    },
                    {
                      "code" : "false",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ". (Irreflexivity)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If ",
                      "type" : "text"
                    },
                    {
                      "code" : "areInIncreasingOrder(a, b)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "areInIncreasingOrder(b, c)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " are",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "both ",
                      "type" : "text"
                    },
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", then ",
                      "type" : "text"
                    },
                    {
                      "code" : "areInIncreasingOrder(a, c)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is also",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ". (Transitive comparability)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Two elements are ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "incomparable",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " if neither is ordered before the other",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "according to the predicate. If ",
                      "type" : "text"
                    },
                    {
                      "code" : "a",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " are incomparable, and ",
                      "type" : "text"
                    },
                    {
                      "code" : "b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and ",
                      "type" : "text"
                    },
                    {
                      "code" : "c",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " are incomparable, then ",
                      "type" : "text"
                    },
                    {
                      "code" : "a",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "c",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " are also incomparable.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "(Transitive incomparability)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example uses an enumeration of playing cards ranks, ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which ranges from ",
              "type" : "text"
            },
            {
              "code" : "ace",
              "type" : "codeVoice"
            },
            {
              "text" : " (low) to ",
              "type" : "text"
            },
            {
              "code" : "king",
              "type" : "codeVoice"
            },
            {
              "text" : " (high). An asynchronous sequence",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "called ",
              "type" : "text"
            },
            {
              "code" : "RankCounter",
              "type" : "codeVoice"
            },
            {
              "text" : " produces all elements of the array. The predicate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "provided to the ",
              "type" : "text"
            },
            {
              "code" : "max(by:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method sorts ranks based on their ",
              "type" : "text"
            },
            {
              "code" : "rawValue",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Rank: Int {",
            "    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king",
            "}",
            "",
            "let max = await RankCounter()",
            "    .max { $0.rawValue < $1.rawValue }",
            "print(max ?? \"none\")",
            "\/\/ Prints \"king\""
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/filestreamer\/filestream\/max(by:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FileStreamer/documentation/FileStreamer": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FileStreamer\/documentation\/FileStreamer",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FileStreamer",
  "type" : "topic",
  "url" : "\/documentation\/filestreamer"
},
"doc://FileStreamer/documentation/FileStreamer/FileStream": {
  "abstract" : [
    {
      "text" : "An async sequence that continously streams the generic ",
      "type" : "text"
    },
    {
      "code" : "Value",
      "type" : "codeVoice"
    },
    {
      "text" : " type from a given file.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FileStream"
    }
  ],
  "identifier" : "doc:\/\/FileStreamer\/documentation\/FileStreamer\/FileStream",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FileStream"
    }
  ],
  "role" : "symbol",
  "title" : "FileStream",
  "type" : "topic",
  "url" : "\/documentation\/filestreamer\/filestream"
},
"doc://FileStreamer/documentation/FileStreamer/FileStream/AsyncSequence-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FileStreamer\/documentation\/FileStreamer\/FileStream\/AsyncSequence-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "AsyncSequence Implementations",
  "type" : "topic",
  "url" : "\/documentation\/filestreamer\/filestream\/asyncsequence-implementations"
},
"doc://FileStreamer/documentation/FileStreamer/FileStream/max(by:)": {
  "abstract" : [
    {
      "text" : "Returns the maximum element in the asynchronous sequence, using the given",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "predicate as the comparison between elements.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "max"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "by"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/FileStreamer\/documentation\/FileStreamer\/FileStream\/max(by:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "max(by:)",
  "type" : "topic",
  "url" : "\/documentation\/filestreamer\/filestream\/max(by:)"
}
}
}